# General
# --------

# + evaluation tolerances
rel_tol = 1e-6
abs_tol = 1e-8

# + parameters for performance tuning

# cuda parameters
cuda_device_number = 0
gpu_block_size = 128

# affects self evaluation speed. 
refpt_max_leaf_size = 32768

# affects grid evaluation and numerical integration speed. 
qgrid_max_leaf_size = 32768

# Reference data 
# --------------

# input file containing the reference points
input_refpts_fname = example.dat

# output file containing scatter plot data to visualize the reference points. 
output_scatter_fname = example_scatter_output.csv

# Cross validation grid
# ---------------------

# skip cross validation to skip to density evaluations
skip_cross_validation = false

# if true, use `manual_bwx` and `manual_bwy` to setup the cross validation 
# bandwidth grid. otherwise, use `(start|end|steps)_bw(x|y)` 
# to dedeuce an evenly spaced grid. 
use_manual_bwgrid = false

manual_bwx = 0.1 0.2 0.3
manual_bwy = 0.1 0.2 0.3

start_bwx = 0.05
end_bwx = 0.35
steps_bwx = 4
start_bwy = 0.05
end_bwy = 0.3
steps_bwy = 4

# output file containing cross validation results for visualization. 
# Note: will only write this file when `use_manual_bwgrid` is false
output_gridsearch_fname = example_gridsearch_result.csv


# Kernel density evaluation queries
# ---------------------------------

# if true, evaluate the density that uses the best bandwidth found 
# during grid search. otherwise, use `eval_bwx` and `eval_bwy` instead. 
# Note: will override to false if `skip_cross_validation` = true
use_gridsearch_best = true
eval_bwx = 0.2
eval_bwy = 0.16

start_qx = -3.0
end_qx = 2.1
steps_qx = 100
start_qy = -1.5
end_qy = 2.5
steps_qy = 100

# output file to visualize evaluation results
output_eval_fname = example_gridsearch_kde.csv

# Adaptive density
# ----------------

# sensitivity parameter
alpha = 0.5

# output file to visualize evaluation results
output_adaptive_eval_fname = example_gridsearch_akde.csv

